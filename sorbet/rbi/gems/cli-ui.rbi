# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cli-ui/all/cli-ui.rbi
#
# cli-ui-1.5.1

module CLI
end
module CLI::UI
  def self.ask(question, **kwargs); end
  def self.confirm(question, **kwargs); end
  def self.enable_color=(bool); end
  def self.enable_color?; end
  def self.fmt(input, enable_color: nil); end
  def self.frame(*args, **kwargs, &block); end
  def self.frame_style=(frame_style); end
  def self.glyph(handle); end
  def self.log_output_to(path); end
  def self.puts(msg, **kwargs); end
  def self.raw; end
  def self.resolve_color(input); end
  def self.resolve_style(input); end
  def self.resolve_text(input, truncate_to: nil); end
  def self.spinner(*args, **kwargs, &block); end
  def self.with_frame_color(color, &block); end
  def self.wrap(input); end
end
module CLI::UI::OS
  def self.current; end
end
class CLI::UI::OS::Mac
  def self.shift_cursor_on_line_reset?; end
  def self.supports_arrow_keys?; end
  def self.supports_color_prompt?; end
  def self.supports_emoji?; end
end
class CLI::UI::OS::Linux < CLI::UI::OS::Mac
end
class CLI::UI::OS::Windows
  def self.shift_cursor_on_line_reset?; end
  def self.supports_arrow_keys?; end
  def self.supports_color_prompt?; end
  def self.supports_emoji?; end
end
module CLI::UI::ANSI
  def self.clear_to_end_of_line; end
  def self.control(args, cmd); end
  def self.cursor_back(n = nil); end
  def self.cursor_down(n = nil); end
  def self.cursor_forward(n = nil); end
  def self.cursor_horizontal_absolute(n = nil); end
  def self.cursor_restore; end
  def self.cursor_save; end
  def self.cursor_up(n = nil); end
  def self.hide_cursor; end
  def self.next_line; end
  def self.previous_line; end
  def self.printing_width(str); end
  def self.sgr(params); end
  def self.show_cursor; end
  def self.strip_codes(str); end
end
class CLI::UI::Color
  def code; end
  def initialize(sgr, name); end
  def name; end
  def self.available; end
  def self.lookup(name); end
  def sgr; end
end
class CLI::UI::Color::InvalidColorName < ArgumentError
  def initialize(name); end
  def message; end
end
module CLI::UI::Spinner
  def self.current_rune; end
  def self.index; end
  def self.index=(arg0); end
  def self.spin(title, auto_debrief: nil, &block); end
end
class CLI::UI::Spinner::SpinGroup
  def add(title, &block); end
  def debrief; end
  def initialize(auto_debrief: nil); end
  def wait; end
end
class CLI::UI::Spinner::SpinGroup::Task
  def check; end
  def exception; end
  def full_render(index, terminal_width); end
  def glyph(index); end
  def initialize(title, &block); end
  def inset; end
  def inset_width; end
  def partial_render(index); end
  def render(index, force = nil, width: nil); end
  def stderr; end
  def stdout; end
  def success; end
  def title; end
  def update_title(new_title); end
end
module CLI::UI::StdoutRouter
  def self.activate(stream, streamname); end
  def self.assert_enabled!; end
  def self.current_id; end
  def self.deactivate(stream); end
  def self.disable; end
  def self.duplicate_output_to; end
  def self.duplicate_output_to=(arg0); end
  def self.enable; end
  def self.enabled?(stream = nil); end
  def self.ensure_activated; end
  def self.with_enabled; end
  def self.with_id(on_streams:); end
end
class CLI::UI::StdoutRouter::Writer
  def apply_line_prefix(str, prefix); end
  def auto_frame_inset?; end
  def initialize(stream, name); end
  def prepend_id(stream, args); end
  def prepend_id_for_stream(stream); end
  def write(*args); end
end
class CLI::UI::StdoutRouter::Capture
  def initialize(*block_args, with_frame_inset: nil, &block); end
  def run; end
  def self.with_stdin_masked; end
  def stderr; end
  def stdout; end
end
